import csv, time
import numpy as np
from utils import data_utils, plot_utils
from keras.models import Sequential
from keras.layers import Input, Dense, Activation, Dropout, Flatten, Reshape
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator
from keras.constraints import maxnorm

dataset = {}
dataset['io'] = {}
dataset['io']['relative path'] = '.'
dataset['io']['directory'] = 'data_mat'
dataset['io']['extension'] = '.mat'
dataset['io']['train fname'] = 'data_batch'
dataset['io']['test fname'] = 'test_data'

dataset['image'] = {}
dataset['image']['shape'] = (32, 32, 3)
dataset['image']['unrolled'] = 32*32*3

dataset['num classes'] = 3
dataset['num train examples'] = 12000
dataset['num test examples'] = 3000
dataset['validation split'] = 8 # 12000 / 8 = 1500

(train, valid, test) = data_utils.load_data(dataset)

data_augmentation = True
nb_classes = 3
epochs = 50
batch=64
model = Sequential()

# https://github.com/nagadomi/kaggle-cifar10-torch7
model.add(ZeroPadding2D(padding=(1,1), input_shape=(32, 32, 3)))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(1024, (3,3)))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Conv2D(1024, (1,1)))
model.add(Activation('relu'))
model.add(Dropout(0.5))

model.add(ZeroPadding2D(padding=(1,1)))
model.add(Conv2D(1024, (3,3)))
model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))

from keras.utils.layer_utils import print_summary
print_summary(model)

# Compile model
lrate = 0.01
decay = lrate/epochs
sgd = SGD(lr=lrate, momentum=0.9, decay=1e-6, nesterov=False)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])


if not data_augmentation:
    print('Not using data augmentation.')
    res = model.fit(train['x'], train['y'],
              batch_size=batch,
              epochs=epochs,
              validation_data=(valid['x'], valid['y']),
              shuffle=True)
    #model.fit(train['x'], train['y'], epochs=epochs, batch_size=batch,validation_data = (valid['x'], valid['y']))
    score = model.evaluate(train['x'], train['y'])
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    train_datagen = ImageDataGenerator(
        featurewise_center=True,
        featurewise_std_normalization=True,
        shear_range=0.2,
        zoom_range=0.2,
        width_shift_range=0.2,
        height_shift_range=0.2,
        zca_whitening=True,
        horizontal_flip=True)

    test_datagen = ImageDataGenerator(zca_whitening=True)
    test_datagen.fit(valid['x'])
    validation_generator = test_datagen.flow(valid['x'], valid['y'])

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    train_datagen.fit(train['x'])
    train_generator = train_datagen.flow(train['x'], train['y'], batch_size=batch)

    # Fit the model on the batches generated by datagen.flow().
    res = model.fit_generator(
        train_generator,
        steps_per_epoch=train['x'].shape[0] // batch,
        epochs=epochs,
        validation_data=validation_generator,
        validation_steps=400)

y_pred_test = model.predict_classes(test['x'], verbose=0)
print(y_pred_test)
y_pred_test = np.array(y_pred_test)

with open('out_1.csv','wb') as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    for pred in y_pred_test:
        wr.writerow([pred])

plot_utils.plot_model_history(res)
